package com.revature.bankdaos;

import com.revature.bankmodels.BankUser;

public class BankAccount {
	
	
	private int bankAccountId;
	private double balance;
	private int bankAccountTypeId;
	//should I call for BankUser.getUserId()?
	

	public BankAccount() {
		super();
		
	}

	public BankAccount(int bankAccountId, double balance, int bankAccountTypeId) {
		super();
		this.bankAccountId = bankAccountId;
		this.balance = balance;
		this.bankAccountTypeId = bankAccountTypeId;
	}

	public int getBankAccountId() {
		return bankAccountId;
	}

	public void setBankAccountId(int bankAccountId) {
		this.bankAccountId = bankAccountId;
	}

	public double getBalance() {
		return balance;
	}

	public void setBalance(double balance) {
		this.balance = balance;
	}

	public int getBankAccountTypeId() {
		return bankAccountTypeId;
	}

	public void setBankAccountTypeId(int bankAccountTypeId) {
		this.bankAccountTypeId = bankAccountTypeId;
	}

	@Override
	public String toString() {
		return "BankAccount [bankAccountId=" + bankAccountId + ", balance=" + balance + ", bankAccountTypeId="
				+ bankAccountTypeId + "]";
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		long temp;
		temp = Double.doubleToLongBits(balance);
		result = prime * result + (int) (temp ^ (temp >>> 32));
		result = prime * result + bankAccountId;
		result = prime * result + bankAccountTypeId;
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		BankAccount other = (BankAccount) obj;
		if (Double.doubleToLongBits(balance) != Double.doubleToLongBits(other.balance))
			return false;
		if (bankAccountId != other.bankAccountId)
			return false;
		if (bankAccountTypeId != other.bankAccountTypeId)
			return false;
		return true;
	}
}
